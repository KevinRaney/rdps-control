# This Vagrantfile is shared by different Vagrant environments.
# Handle with care. For customisation remove the link to
# the shared vagrant/Vagrantfile and create a new Vagrantfile
# under vagran/environments/$your_environment/
require 'yaml'
require 'ipaddr'

# Add a deep_merge method to Hash
class ::Hash
  def deep_merge(second)
    merger = proc { |key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : Array === v1 && Array === v2 ? v1 | v2 : [:undefined, nil, :nil].include?(v2) ? v1 : v2 }
    self.merge(second.to_h, &merger)
  end
end

# Method to iterate over a hash and turn its keys from symbols into strings
def keys_sym_to_str(hash)
  stringified_hash = {}
  hash.each do |k, v|
    if v.is_a?(Hash)
      stringified_hash[k.to_s] = keys_sym_to_str(v)
    elsif v.is_a?(Array)
      stringified_hash[k.to_s] = []
      v.each do |a|
        if a.is_a?(Hash)
          stringified_hash[k.to_s] << keys_sym_to_str(a)
        end
      end
    else
      stringified_hash[k.to_s] = v
    end

  end
  stringified_hash
end

# Nodes configuration is defined in config.yaml
vagrantfile_dir = File.expand_path File.dirname(__FILE__)
config_file = File.join(vagrantfile_dir, 'config.yaml')

if !File.exist?(config_file)
  throw("File config.yaml not found. Must be in same dir of Vagrantfile")
end

default_settings = {
  :vm => {
    memory: '512',
    cpu: '1',
  },
  :network => {
    range: '10.42.40.0/24',
    ip_start_offset: 101,
    domain: 'vagrant',
  },
  :vagrant => {
    hostmanager_enabled: false,
    hostmanager_manage_host: false,
    hostmanager_ignore_private_ip: false,
    hostmanager_include_offline: true,
  },
  :puppet => {
    environment: 'development',
    apptier: 'vagrant',
    role: '',
    master_fqdn: 'puppet-csas.cr.usgs.gov',
    application: nil,
    install_puppet: false,
    setup_puppet: false,
    puppet_apply: false,
    facter_external_facts: false,
    facter_trusted_facts: false,
    pe_verbose: true,
    pe_version: nil,
    pe_relocate_manifests: nil,
    pe_download_root: nil,
    master_vm: nil,
  },
  :vbguest => {
    auto_update: true
  },
}

yaml_settings = YAML.load_file(config_file)

# Merge the YAML settings with the default settings. Ensure hash keys are strings - it's just easier to deal with all of them - e.g.
# hostnames with hyphens as hash keys.
settings = keys_sym_to_str(default_settings).deep_merge(keys_sym_to_str(yaml_settings))

# Network and Puppet basics
network_obj = IPAddr.new settings['network']['range']
network_ip_range = network_obj.to_range.to_a
ip_index = settings['network']['ip_start_offset']

# We mount this directory on the VMs and then link puppet_environment to it
# This is needed to avoid Puppet installation issues complaining about limited space
# under production
puppet_code_dir = '/control'

# Define vms settings
nodes = settings['nodes']

# Iterate over nodes and merge default settings in
nodes.each do |node, params|
  # Merge the default 'vm' settings with this node's settings
  nodes[node] = settings['vm'].deep_merge(params)

  # Merge the default 'puppet' settings with this node's puppet settings
  nodes[node]['puppet'] = {} unless params['puppet']
  nodes[node]['puppet'] = settings['puppet'].deep_merge(nodes[node]['puppet'])

  # Use a specified ip_address, otherwise, increment the 'ip_start_offset'
  if params['ip_address']
    nodes[node]['ip'] = params['ip_address']
  else
    nodes[node]['ip'] = network_ip_range[ip_index].to_s
    ip_index+=1
  end

  nodes[node]['aliases'] = [
      "%s.%s" % [node, settings['network']['domain']],
  ]

  nodes[node]['fqdn'] = params['fqdn'] ? params['fqdn'] : "%s.%s" % [node, settings['network']['domain']]
end

# Vagrant configuration
Vagrant.configure("2") do |config|

  # hostmanager config
  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = settings['vagrant']['hostmanager_enabled']
    config.hostmanager.manage_host = settings['vagrant']['hostmanager_manage_host']
    config.hostmanager.ignore_private_ip = settings['vagrant']['hostmanager_ignore_private_ip']
    config.hostmanager.include_offline = settings['vagrant']['hostmanager_include_offline']
  end

  # See https://github.com/mitchellh/vagrant/issues/1673
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  nodes.each do |node_name, node|

      config.vm.define node_name do |node_config|

        node_config.vm.box = settings['boxes'][node['box']]['box']
        node_config.vm.box_url = settings['boxes'][node['box']]['box_url'] if settings['boxes'][node['box']]['box_url']
        node_config.vm.hostname = node['fqdn']
        node_config.vm.network :private_network, ip: node['ip']

        node_config.vm.network :private_network, ip: node['ipv6'] if node['ipv6']

        node_config.vm.provision "shell", path: '../../../bin/vagrant-sethostname.sh', args: node['fqdn']

        # Set external facts if 'facter_external_facts' is true
        node_config.vm.provision "shell", path: '../../../bin/vagrant-setfacts.sh', args: "--role #{node['puppet']['role']} --env #{node['puppet']['environment']} --apptier #{node['puppet']['apptier']} --application #{node['puppet']['application']}" if node['puppet']['facter_external_facts']

        # Set trusted facts if 'facter_trusted_facts' is true
        node_config.vm.provision "shell", path: '../../../bin/vagrant-settrustedfacts.sh', args: "--role #{node['puppet']['role']} --env #{node['puppet']['environment']} --apptier #{node['puppet']['apptier']} --application #{node['puppet']['application']}" if node['puppet']['facter_trusted_facts']

        # Install Puppet
        node_config.vm.provision "shell", path: '../../../bin/puppet_install.sh' if node['puppet']['install_puppet']

        # Add the DOI CA certificate to the system's SSL
        node_config.vm.provision "shell", path: '../../../bin/add_doi_ca_cert.sh' if node['add_doi_cert']

        # Add the DOI CA certificate to the Puppet agent installation
        node_config.vm.provision "shell", path: '../../../bin/add_doi_ca_cert_puppet.sh' if node['add_doi_cert']

        # Setup the application tracker metadata file for tracking instances
        node_config.vm.provision "shell", path: '../../../bin/vagrant-application_track.sh' if node['puppet']['setup_puppet']

        if Vagrant.has_plugin?("vagrant-hostmanager")
          node_config.hostmanager.aliases = node['aliases']
          node_config.hostmanager.manage_host = settings['vagrant']['hostmanager_manage_host']
        end

        if Vagrant.has_plugin?("vagrant-pe_build") and node['puppet']['pe_role'] == 'master'
          node_config.pe_build.version = node['puppet']['pe_version'] if node['puppet']['pe_version']
          node_config.pe_build.download_root = node['puppet']['pe_download_root'] if node['puppet']['pe_download_root']

          node_config.vm.provision :pe_bootstrap do |p|
            p.role = node['puppet']['pe_role']
            p.verbose = node['puppet']['pe_verbose']
            p.relocate_manifests = node['puppet']['pe_relocate_manifests']
            p.answer_file = node['puppet']['pe_answer_file'] if node['puppet']['pe_answer_file']
            p.master = node['puppet']['master_fqdn']
          end
        end

        if node['puppet']['role'] != 'puppet'
          if Vagrant.has_plugin?("vagrant-hostmanager") and Vagrant.has_plugin?('vagrant-triggers')
            # register destroy trigger to remove the node from puppet master
            node_config.trigger.after :destroy do
              node_name = @machine.name.to_s
              puts "Cleaning #{node_name} certificate from puppet"
              `vagrant ssh #{settings['puppet']['master_vm']} -- -t 'sudo puppet cert clean #{node['hostname']}'`
              puts "Deactivating #{node_name} from puppet"
              `vagrant ssh #{settings['puppet']['master_vm']} -- -t 'sudo puppet node deactivate #{node['hostname']}'`
            end
          end
        end

        if node['puppet']['setup_puppet'] == true
          node_config.vm.synced_folder "../../../", puppet_code_dir, mount_options: ["ro"]
          node_config.vm.provision "shell", path: '../../../bin/vagrant-linkcontrolrepo.sh', args: ["#{node['puppet']['environment']}", "#{puppet_code_dir}"]
          node_config.vm.provision "shell", path: '../../../bin/vagrant-setup_papply.sh', args: "#{node['puppet']['environment']}"
        end

        if node['puppet']['puppet_apply'] == true
          node_config.vm.provision "shell", path: '../../../bin/papply.sh', args: "--role #{node['puppet']['role']}"
        end

        if node['puppet']['puppet_agent'] == true
          if Vagrant.has_plugin?("vagrant-pe_build") and settings['puppet']['install_pe']
            node_config.vm.provision :pe_agent do |p|
              p.master_vm = settings['puppet']['master_vm'] if settings['puppet']['master_vm']
            end
          end
          node_config.vm.provision "shell", path: "../../../bin/pagent.sh", args: "--server #{node['puppet']['master_fqdn']}"
        end
        node_config.vm.provision "shell", inline: "echo '=> Vagrant provisioning complete!'"

        if node['forwarded_port']
          node_config.vm.network "forwarded_port", guest: node['forwarded_port']['guest'], host: node['forwarded_port']['host']
        end
        if node['forwarded_port2']
          node_config.vm.network "forwarded_port", guest: node['forwarded_port2']['guest'], host: node['forwarded_port2']['host']
        end

        node_config.vm.provider "virtualbox" do |v|
          v.customize ['modifyvm', :id, '--name', node['fqdn']]
          v.customize ['modifyvm', :id, '--cpus', node['cpu'].to_s]
          v.customize ['modifyvm', :id, '--memory', node['memory'].to_s]
        end
      end
  end
end
